// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image_transformation.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createImageTransformation = `-- name: CreateImageTransformation :one
INSERT INTO image_transformations(
    image_id,
    transformation,
    url
)
VALUES(
    $1,
    $2,
    $3
)
RETURNING id, image_id, transformation, url, transformed_at
`

type CreateImageTransformationParams struct {
	ImageID        pgtype.UUID `json:"image_id"`
	Transformation []byte      `json:"transformation"`
	Url            string      `json:"url"`
}

func (q *Queries) CreateImageTransformation(ctx context.Context, arg CreateImageTransformationParams) (ImageTransformation, error) {
	row := q.db.QueryRow(ctx, createImageTransformation, arg.ImageID, arg.Transformation, arg.Url)
	var i ImageTransformation
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Transformation,
		&i.Url,
		&i.TransformedAt,
	)
	return i, err
}

const getImageTransformations = `-- name: GetImageTransformations :many
SELECT 
    id, image_id, transformation, url, transformed_at 
FROM 
    image_transformations
WHERE 
    image_id = $1
OFFSET $2 
LIMIT $3
`

type GetImageTransformationsParams struct {
	ImageID pgtype.UUID `json:"image_id"`
	Offset  int32       `json:"offset"`
	Limit   int32       `json:"limit"`
}

func (q *Queries) GetImageTransformations(ctx context.Context, arg GetImageTransformationsParams) ([]ImageTransformation, error) {
	rows, err := q.db.Query(ctx, getImageTransformations, arg.ImageID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImageTransformation{}
	for rows.Next() {
		var i ImageTransformation
		if err := rows.Scan(
			&i.ID,
			&i.ImageID,
			&i.Transformation,
			&i.Url,
			&i.TransformedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
